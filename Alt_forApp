ui <- fluidPage(
  titlePanel("Custom Dashboard"),
  fluidRow(
    column(6,
           h3("Dropdowns"),
           selectInput("temperature", "Temperature", choices = seq(2, 10, by = 2), selected = 6),
           selectInput("carbon_content", "Carbon Content", choices = seq(2, 10, by = 2), selected = 6),
           selectInput("logFoc", "logFoc", choices = seq(2, 10, by = 2), selected = 6),
           selectInput("logDose", "logDose", choices = seq(2, 10, by = 2), selected = 6),
           selectInput("log_T_Dose", "Log_T_Dose", choices = seq(2, 10, by = 2), selected = 6)
    ),
    column(6,
           h3("Sliders"),
           sliderInput("temperature_slider", "Temperature Slider", min = 0, max = 12, value = 6),
           sliderInput("carbon_content_slider", "Carbon Content Slider", min = 0, max = 12, value = 6),
           sliderInput("logFoc_slider", "logFoc Slider", min = 0, max = 12, value = 6),
           sliderInput("logDose_slider", "logDose Slider", min = 0, max = 12, value = 6),
           sliderInput("log_T_Dose_slider", "Log_T_Dose Slider", min = 0, max = 12, value = 6)
    )
  ),
  hr(),
  actionButton("run_script", "Run Script"),
  hr(),
  DTOutput("table"),
  downloadButton("download_csv", "Download Processed CSV")
)

server <- function(input, output) {
  observe({
    inputs <- c("temperature", "carbon_content", "logFoc", "logDose", "log_T_Dose")
    for (var in inputs) {
      if (input[[var]] <= 4) {
        showModal(
          modalDialog(
            title = "Warning",
            "Values between 0 and 4 are discouraged.",
            easyClose = TRUE
          )
        )
        break
      }
    }
  })
  
  processed_data <- eventReactive(input$run_script, {
    input_vars <- c(
      input$temperature, input$carbon_content, input$logFoc,
      input$logDose, input$log_T_Dose
    )
    # Call the function from your modified pre-existing script with user inputs
    processed_data <- process_data(input_vars)
    processed_data
  })
  
  output$table <- renderDT({
    datatable(processed_data(), options = list(pageLength = 5))
  })
  
  output$download_csv <- downloadHandler(
    filename = function() {
      "processed_data.csv"
    },
    content = function(file) {
      write.csv(processed_data(), file, row.names = FALSE)
    }
  )
}

shinyApp(ui, server)
